(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{522:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"原型原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型原型链"}},[t._v("#")]),t._v(" 原型原型链")]),t._v(" "),a("p",[t._v("原型是什么？\n在 JavaScript 中原型是一个 prototype 对象，用于表示类型之间的关系。")]),t._v(" "),a("p",[t._v("原型链是什么？")]),t._v(" "),a("p",[t._v("​JavaScript 万物都是对象，对象和对象之间也有关系，并不是孤立存在的。 对象之间的继承关系，在 JavaScript 中是通过 prototype 对象指向父类对象， 直到指向 Object 对象为止，这样就形成了一个原型指向的链条，专业术语称之为原型链。")]),t._v(" "),a("p",[t._v("prototype 是构造器的一个属性。在 JS 中，每一个对象的构造器都有一个 prototype 属性。 prototype 在 JS 中用于原型继承，可以使构造器构造出来的多个对象可以共享原型的对象。 其实无论使我们自己自定义的构造器还是原生的构造器都有 prototype 属性。 JS 中的对象关系是通过原型继承来实现的，而且通常原型继承有很多的层级，这些不同的层级就构成了原型链。")]),t._v(" "),a("h2",{attrs:{id:"更改元素样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更改元素样式"}},[t._v("#")]),t._v(" 更改元素样式")]),t._v(" "),a("p",[t._v("​ 定义好不同的样式")]),t._v(" "),a("p",[t._v("vue：通过变量动态控制 class")]),t._v(" "),a("p",[t._v("jq:通过$().addClass()/$().removeClass()")]),t._v(" "),a("h2",{attrs:{id:"javascript-中如何检测一个变量是一个-string-类型-请写出函数实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中如何检测一个变量是一个-string-类型-请写出函数实现"}},[t._v("#")]),t._v(" JavaScript 中如何检测一个变量是一个 String 类型？请写出函数实现")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" String\n")])])]),a("h2",{attrs:{id:"比较-typeof-与-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较-typeof-与-instanceof"}},[t._v("#")]),t._v(" 比较 typeof 与 instanceof")]),t._v(" "),a("p",[t._v("相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。")]),t._v(" "),a("p",[t._v("typeof 的定义和用法：返回值是一个字符串，用来说明变量的数据类型。")]),t._v(" "),a("p",[t._v("细节：")]),t._v(" "),a("p",[t._v("(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。")]),t._v(" "),a("p",[t._v('(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。')]),t._v(" "),a("p",[t._v("(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。")]),t._v(" "),a("p",[t._v("Instanceof 定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。")]),t._v(" "),a("h2",{attrs:{id:"请用-js-去除字符串空格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请用-js-去除字符串空格"}},[t._v("#")]),t._v(" 请用 js 去除字符串空格？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\s*")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//去除所有空格")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\s*|\\s*$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//去除两头空格")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\s*")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" “”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//去除左空格")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\s*$)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//去除右空格")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//局限性：无法去除中间的空格")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trimLeft")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trimRight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//分别用于去除字符串左右空格。")]),t._v("\n")])])]),a("h2",{attrs:{id:"怎样添加、移除、移动、复制、创建和查找节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎样添加、移除、移动、复制、创建和查找节点"}},[t._v("#")]),t._v(" 怎样添加、移除、移动、复制、创建和查找节点？")]),t._v(" "),a("p",[t._v("1）创建新节点")]),t._v(" "),a("p",[t._v("createDocumentFragment() //创建一个 DOM 片段")]),t._v(" "),a("p",[t._v("createElement() //创建一个具体的元素")]),t._v(" "),a("p",[t._v("createTextNode() //创建一个文本节点")]),t._v(" "),a("p",[t._v("2）添加、移除、替换、插入")]),t._v(" "),a("p",[t._v("appendChild() //添加")]),t._v(" "),a("p",[t._v("removeChild() //移除")]),t._v(" "),a("p",[t._v("replaceChild() //替换")]),t._v(" "),a("p",[t._v("insertBefore() //插入")]),t._v(" "),a("p",[t._v("3）查找")]),t._v(" "),a("p",[t._v("getElementsByTagName() //通过标签名称")]),t._v(" "),a("p",[t._v("getElementsByName() //通过元素的 Name 属性的值")]),t._v(" "),a("p",[t._v("getElementById() //通过元素 Id，唯一性")]),t._v(" "),a("h2",{attrs:{id:"如何理解闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解闭包"}},[t._v("#")]),t._v(" 如何理解闭包")]),t._v(" "),a("p",[t._v("1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。")]),t._v(" "),a("p",[t._v("2、表现形式：使函数外部能够调用函数内部定义的变量。")]),t._v(" "),a("p",[t._v("3、实例如下：")]),t._v(" "),a("p",[t._v("(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到 window 的变量，没有就返回 undefined。这里明显 count 是函数内部的 flag2 的那个 count 。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//全局作用域 标记为flag1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数全局作用域 标记为flag2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数的内部作用域")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出2")]),t._v("\n")])])]),a("p",[t._v("4、变量的作用域")]),t._v(" "),a("p",[t._v("要理解闭包，首先必须理解 Javascript 特殊的变量作用域。")]),t._v(" "),a("p",[t._v("变量的作用域分类：全局变量和局部变量。")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("p",[t._v("1)、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。")]),t._v(" "),a("p",[t._v("2)、函数内部声明变量的时候，一定要使用 var 命令。如果不用的话，你实际上声明了一个全局变量！")]),t._v(" "),a("p",[t._v("5、使用闭包的注意点")]),t._v(" "),a("p",[t._v("1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。")]),t._v(" "),a("p",[t._v("2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。")]),t._v(" "),a("h2",{attrs:{id:"什么是跨域-跨域请求资源的方法有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域-跨域请求资源的方法有哪些"}},[t._v("#")]),t._v(" 什么是跨域？跨域请求资源的方法有哪些？")]),t._v(" "),a("p",[t._v("1、什么是跨域？")]),t._v(" "),a("p",[t._v("由于浏览器同源策略，凡是发送请求 url 的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：")]),t._v(" "),a("p",[t._v("网络协议不同，如 http 协议访问 https 协议。")]),t._v(" "),a("p",[t._v("端口不同，如 80 端口访问 8080 端口。")]),t._v(" "),a("p",[t._v("域名不同，如 qianduanblog.com 访问 baidu.com。")]),t._v(" "),a("p",[t._v("子域名不同，如 abc.qianduanblog.com 访问 def.qianduanblog.com。")]),t._v(" "),a("p",[t._v("域名和域名对应 ip,如 www.a.com 访问 20.205.28.90.")]),t._v(" "),a("p",[t._v("2、跨域请求资源的方法：")]),t._v(" "),a("p",[t._v("(1)、porxy 代理")]),t._v(" "),a("p",[t._v("定义和用法：proxy 代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。")]),t._v(" "),a("p",[t._v("实现方法：通过 nginx 代理；")]),t._v(" "),a("p",[t._v("注意点：1、如果你代理的是 https 协议的请求，那么你的 proxy 首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。")]),t._v(" "),a("p",[t._v("(2)、CORS 【Cross-Origin Resource Sharing】")]),t._v(" "),a("p",[t._v("定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。")]),t._v(" "),a("p",[t._v("使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html; charset=UTF-8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Origin'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Methods'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET, POST, OPTIONS'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Headers'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X-Requested-With, Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("(3)、jsonp")]),t._v(" "),a("p",[t._v("定义和用法：通过动态插入一个 script 标签。浏览器对 script 的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。")]),t._v(" "),a("p",[t._v("特点：通过情况下，通过动态创建 script 来读取他域的动态资源，获取的数据一般为 json 格式。")]),t._v(" "),a("p",[t._v("实例如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testjsonp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取返回的结果")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" _script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  _script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/javascript"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  _script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8888/jsonp?callback=testjsonp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("缺点：")]),t._v(" "),a("p",[t._v("1、这种方式无法发送 post 请求（这里）")]),t._v(" "),a("p",[t._v("2、另外要确定 jsonp 的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。")]),t._v(" "),a("h2",{attrs:{id:"jq-里面怎么改变元素的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq-里面怎么改变元素的属性"}},[t._v("#")]),t._v(" jq 里面怎么改变元素的属性")]),t._v(" "),a("p",[t._v("​$().attr()")]),t._v(" "),a("p",[t._v("$().addClass()")]),t._v(" "),a("p",[t._v("$().removeClass()")]),t._v(" "),a("h2",{attrs:{id:"jq-选择器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq-选择器"}},[t._v("#")]),t._v(" jq 选择器")]),t._v(" "),a("p",[t._v("​(1)、基本选择器：#id，class,element,*;")]),t._v(" "),a("p",[t._v("(2)、层次选择器：parent > child，prev + next ，prev ~ siblings")]),t._v(" "),a("p",[t._v("(3)、基本过滤器选择器：:first，:last ，:not ，:even ，:odd ，:eq ，:gt ，:lt")]),t._v(" "),a("p",[t._v("(4)、内容过滤器选择器： :contains ，:empty ，:has ，:parent")]),t._v(" "),a("p",[t._v("(5)、可见性过滤器选择器：:hidden ，:visible")]),t._v(" "),a("p",[t._v("(6)、属性过滤器选择器：[attribute] ，[attribute=value] ，[attribute!=value] ，[attribute^=value] ，[attribute$=value] ，[attribute*=value]")]),t._v(" "),a("p",[t._v("(7)、子元素过滤器选择器：:nth-child ，:first-child ，:last-child ，:only-child")]),t._v(" "),a("p",[t._v("(8)、表单选择器： :input ，:text ，:password ，:radio ，:checkbox ，:submit 等；")]),t._v(" "),a("p",[t._v("(9)、表单过滤器选择器：:enabled ，:disabled ，:checked ，:selected")]),t._v(" "),a("h2",{attrs:{id:"jq-按钮点击无反应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq-按钮点击无反应"}},[t._v("#")]),t._v(" jq 按钮点击无反应")]),t._v(" "),a("p",[t._v("​ 首先确保用户确实点击了，在开发者工具里调试，看看是不是前端的错误")]),t._v(" "),a("h2",{attrs:{id:"this-和-this-关键字在-jquery-中有何不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-和-this-关键字在-jquery-中有何不同"}},[t._v("#")]),t._v(" $(this) 和 this 关键字在 jQuery 中有何不同？")]),t._v(" "),a("p",[t._v("$(this) 返回一个 jQuery 对象，你可以对它调用多个 jQuery 方法，比如用 text() 获取文本，用 val() 获取值等等。")]),t._v(" "),a("p",[t._v("而 this 代表当前元素，它是 JavaScript 关键词中的一个，表示上下文中的当前 DOM 元素。你不能对它调用 jQuery 方法，直到它被 $() 函数包裹，例如$(this)。")]),t._v(" "),a("h2",{attrs:{id:"document-ready-方法和-window-onload-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-ready-方法和-window-onload-有什么区别"}},[t._v("#")]),t._v(" $(document).ready()方法和 window.onload 有什么区别？")]),t._v(" "),a("p",[t._v("(1)、window.onload 方法是在网页中所有的元素(包括元素的所有关联文件)完全加载到浏览器后才执行的。")]),t._v(" "),a("p",[t._v("(2)、$(document).ready() 方法可以在 DOM 载入就绪时就对其进行操纵，并调用执行绑定的函数。")])])}),[],!1,null,null,null);s.default=e.exports}}]);